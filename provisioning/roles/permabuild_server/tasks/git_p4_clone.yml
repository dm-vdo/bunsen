---
# Incoming vars: p4user (optional), p4server, depot_path, git_repo_path
# Modifies vars: stat, gitlog, result

- block:
    - name: Install git-p4 to support cloning from Perforce
      include_role:
        name: special_packages
        tasks_from: git_p4
        apply:
          become_user: root

    - name: Checking for presence of existing mirror repo
      stat:
        path: "{{ git_repo_path }}/.git/refs/remotes/p4/master"
      register: stat

    # Invocations of "git p4" need to find the "git-p4" executable which will
    # be installed in /usr/local/bin, which may not be in the user's
    # PATH. Hence the use of the shell module and adjustments to PATH. We could
    # fudge it in the "environment" block below using ansible_env['PATH'], but
    # then we get into questions of which user's environment we picked up...

    - name: Create a fresh clone of the Perforce tree
      shell: env PATH=$PATH:/usr/local/bin \
               git p4 clone "{{ depot_path }}" "{{ git_repo_path }}"
      when: not stat.stat.exists

    - block:

        - name: Examine an existing clone branch
          command: git log -1 p4/master
          args:
            chdir: "{{ git_repo_path }}"
          register: gitlog
          changed_when: false

        - block:

          # Verify that the depot path matches the one we want to clone.
          #
          # Initial import of //eng/uds-releases/gloria/ from the state at \
          #   #head
          #
          # or
          #
          # Initial import of //eng/uds-releases/gloria/ from the state at \
          #   revision @2019/06/15:12:00:00
          - name: Verify existing clone branch
            assert:
              that: "{{ repo_depot == p4_depot_path }}"
              msg: "Perforce repo mismatch: expected {{ p4_depot_path }}, \
                      found {{ repo_depot }}"

          # Only update the repo when not using a specific version.
          - block:

            - name: Update git p4 mirror remote branch
              shell: env PATH=$PATH:/usr/local/bin git p4 sync
              args:
                chdir: "{{ git_repo_path }}"
              register: result
              changed_when: "'No changes to import' not in result.stdout"

            - name: Resync git p4 mirror master branch
              command: git merge --ff-only p4/master
              args:
                chdir: "{{ git_repo_path }}"
              register: result
              changed_when: "'Already up-to-date' not in result.stdout"

            when: "'...@' not in repo_depot"

          vars:
            # Pick apart the log entry and determine if we're using a specific
            # version.
            #
            # Look for a line of the form:
            #   Initial import .+ from the state at @\S+
            # to check for a specified version.
            #
            # Use the final line, e.g.:
            #   [git-p4: depot-paths = "//eng/uds-releases/jasper/": \
            #     change = 139328]
            # to get the clone's depot path.
            p4_depot_path: "{{ depot_path }}/"
            # regex_search() returns None if there is no match rather than an
            # empty string.  As None evalutes as false and a non-empty string
            # as true we use ternary() to translate None to an empty string
            # (which will also continue to work if someday regex_search() is
            # changed to return an empty string for no match).
            # If there is a match we get back the entire line and need to pull
            # the actual version from the end of the line.
            repo_depot: "\
              {%- set path = gitlog.stdout_lines[-1].split('\"')[1] -%}
              {%- set line = gitlog.stdout | regex_search(
                '^\\s*Initial import .+ from the state at revision @\\S+\\s*$',
                multiline = True) -%}
              {%- set line = (line | ternary(line, '')).strip() -%}
              {%- if line != '' -%}
                {%- set path = path + '...' + line.split()[-1] + '/' -%}
              {%- endif -%}
              {{ path }}"

      when: stat.stat.exists

  vars:
    # N.B. IF WE EVER UTILIZE A DIFFERENT PERFORCE SERVER THAN THE PERMABIT
    #      ONE WE'LL NEED TO CHANGE THIS HANDLING.
    #
    # We need a user that has access to the perforce server; we default to
    # using nightly for that purpose if we cannot ascertain the most likely
    # user account on the perforce server.  Most likely it will be the value
    # of target_user_account except that may have been overridden by
    # target_user_accounts (note plural) which, if not specified, would have
    # been created using target_user_account.  So, if target_user_accounts
    # has one entry that's the likely user account.
    p4user: "{%- if (target_user_accounts | count) == 1 -%}
                {{ target_user_accounts[0] }}
             {%- else -%}
                nightly
             {%- endif -%}"
      
  environment:
    P4USER: "{{ p4user }}"
    P4PORT: "{{ p4server }}"
