---
# Try to detect when interfaces might go offline, routes get dropped, hosts
# become unreachable, etc.
#
# Belt and suspenders... hopefully the "monitor" version will record in real
# time when addresses and routes change, but until we gather enough data to
# have confidence in that, do the periodic checks as well. Kernel status
# changes also won't tell us about reachability problems elsewhere on the
# network.
#
# N.B.: A host may appear unreachable if a test is rebooting it.

- block:
  - block:
      - name: Install network checker script
        template:
          src: network-checker.sh
          dest: "{{ script_name }}"
          mode: 0755

      - name: Install checker systemd unit file
        template:
          src: network-checker.service
          dest: "/etc/systemd/system/{{ service }}.service"

      - name: Install checker systemd timer file
        template:
          src: network-checker.timer
          dest: "/etc/systemd/system/{{ service }}.timer"

      - name: Start checker service timer
        systemd:
          name: "{{ service }}.timer"
          state: started
          enabled: yes
          daemon_reload: yes

    vars:
      # We don't strictly need every host to be able to reach every other host --
      # in current VDO tests the farms don't talk to each other, for example. But
      # testing every combination is easy to set up and doesn't require a
      # breakdown by role of the checking host, and gives us a more complete
      # picture of the state of the Red Hat network.
      host_list: "{{ groups['all'] }}"
      service: pbit-network-checker
      script_name: /sbin/pbit-check-network

  - block:
      - name: Install monitor systemd unit file
        copy:
          content: |
            [Unit]
            Description=Monitor network status
            [Service]
            Type=simple
            ExecStart=/sbin/ip monitor link address route netconf prefix label
            [Install]
            WantedBy=multi-user.target
          dest: "/etc/systemd/system/{{ service }}.service"

      - name: Start monitor service
        systemd:
          name: "{{ service }}.service"
          state: started
          enabled: yes
          daemon_reload: yes

    vars:
      service: pbit-network-monitor
  when: is_beaker | bool
